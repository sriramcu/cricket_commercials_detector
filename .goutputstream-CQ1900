# USAGE
# python train_anomaly_detector.py --dataset forest --model anomaly_detector.model

# import the necessary packages
from pyimagesearch.features import load_dataset
from sklearn.ensemble import IsolationForest
import argparse
import pickle
import sys
import shelve
import os


# construct the argument parser and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-d", "--dataset", required=True,
	help="path to dataset of images")
ap.add_argument("-m", "--model", required=True,
	help="path to output anomaly detection model")
    
# ~ ap.add_argument("-s", "--shelve", required=True,
	# ~ help="path to shelf file in whuch face encodings are stored")

# ~ ap.add_argument("-c", "--cricketers", required=True,
	# ~ help="path to folder in which cricketers' faces are stored")
    
args = vars(ap.parse_args())

# load and quantify our image dataset
print("[INFO] preparing dataset...")
data = load_dataset(args["dataset"], bins=(3, 3, 3))

# train the anomaly detection model
print("[INFO] fitting anomaly detection model...")
model = IsolationForest(n_estimators=5000, contamination=0.1,
	random_state=42)
model.fit(data)

# serialize the anomaly detection model to disk
f = open(args["model"], "wb")
f.write(pickle.dumps(model))
f.close()

print("Anomaly training done")              

# ~ sf = shelve.open(args["shelve"])
# ~ names = []
# ~ known_fe = []
# ~ for f in os.listdir(args["cricketers"]):   

    # ~ known_image = face_recognition.load_image_file(os.path.join(args["cricketers"],f))
    # ~ known_face_encoding = face_recognition.face_encodings(known_image)[0]
    # ~ names.append(f)
    # ~ known_fe.append(known_face_encoding)
 
# ~ sf["names"] = names
# ~ sf["known_fe"] = known_fe
# ~ sf.close()
